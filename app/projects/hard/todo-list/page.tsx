'use client';

/**
 * # Приложение Todo List с аутентификацией
 * 
 * ## Принцип работы:
 * 
 * 1. **Аутентификация пользователей**:
 *    - Приложение использует Supabase для аутентификации пользователей
 *    - Поддерживается регистрация и вход с помощью email/пароль
 *    - Состояние аутентификации хранится в Redux и синхронизируется с Supabase
 *    - При загрузке приложения проверяется наличие активной сессии
 * 
 * 2. **Маршрутизация и защита маршрутов**:
 *    - Неаутентифицированные пользователи видят форму входа/регистрации
 *    - Аутентифицированные пользователи автоматически перенаправляются на страницу задач
 *    - Защищенные маршруты недоступны без аутентификации
 * 
 * 3. **Управление задачами**:
 *    - Пользователи могут создавать, просматривать, редактировать и удалять задачи
 *    - Задачи хранятся в базе данных Supabase и связаны с конкретным пользователем
 *    - Поддерживается фильтрация и сортировка задач
 * 
 * 4. **Состояние приложения**:
 *    - Для управления глобальным состоянием используется Redux
 *    - Асинхронные операции (запросы к API) выполняются с помощью RTK Query
 *    - Локальное состояние компонентов управляется с помощью React-хуков
 * 
 * 5. **Пользовательский интерфейс**:
 *    - Адаптивный дизайн с использованием компонентов UI библиотеки
 *    - Индикаторы загрузки для асинхронных операций
 *    - Уведомления о результатах действий пользователя
 * 
 * Данная страница является входной точкой приложения и отвечает за отображение
 * формы аутентификации или перенаправление на страницу задач, если пользователь
 * уже аутентифицирован.
 */

import { AuthForm } from './components';
import { JSX, useEffect } from 'react';
import { Spinner } from '@/components/ui';
import { useAppSelector } from '@/app/projects/hard/todo-list/redux';
import { useRouter } from 'next/navigation';

/**
 * Компонент главной страницы приложения Todo List
 * 
 * @description Компонент отвечает за отображение формы аутентификации для неавторизованных
 * пользователей или перенаправление на страницу задач для авторизованных пользователей.
 * Во время проверки состояния аутентификации отображается индикатор загрузки.
 * 
 * Логика работы:
 * 1. При загрузке компонента проверяется состояние аутентификации из Redux
 * 2. Если пользователь авторизован, происходит перенаправление на страницу задач
 * 3. Если пользователь не авторизован, отображается форма аутентификации
 * 4. Во время проверки состояния аутентификации отображается индикатор загрузки
 * 
 * @returns {JSX.Element} Компонент страницы с формой аутентификации или индикатором загрузки
 */
const TodoListPage = (): JSX.Element => {
  /**
   * Получение данных о пользователе и состоянии загрузки из Redux
   * @type {{user: User | null, isLoading: boolean}}
   */
  const { user, isLoading } = useAppSelector(state => state.auth);
  
  /**
   * Хук для программной навигации между страницами
   */
  const router = useRouter();

  /**
   * Эффект для перенаправления авторизованного пользователя на страницу задач
   * 
   * @description Если пользователь авторизован и загрузка завершена,
   * происходит перенаправление на страницу задач
   */
  useEffect(() => {
    if (user && !isLoading) {
      router.push('/projects/hard/todo-list/todos');
    }
  }, [user, isLoading, router]);

  /**
   * Рендеринг компонента
   * 
   * @returns {JSX.Element} Индикатор загрузки или форма аутентификации
   */
  return isLoading ? <Spinner /> : <AuthForm />;
};

export default TodoListPage;