'use client';

/**
 * # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ" (Guess The Number CLI)
 *
 * ## –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
 *
 * 1. **–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã**:
 *    - –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.
 *    - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–ø–∏—Å–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã.
 *
 * 2. **–í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**:
 *    - –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∏–º—è.
 *    - –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏, –ø–æ–ª–µ –≤–≤–æ–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞.
 *
 * 3. **–ü—Ä–æ—Ü–µ—Å—Å —É–≥–∞–¥—ã–≤–∞–Ω–∏—è**:
 *    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 100.
 *    - –ü—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º—É.
 *    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞—é—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∏: "—Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ" –∏–ª–∏ "—Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ".
 *    - –ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫.
 *
 * 4. **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã**:
 *    - –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ.
 *    - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.
 *    - –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–Ω–∏–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞.
 *
 * 5. **–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞**:
 *    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —á–∏—Å–ª–∞.
 *    - –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏.
 *
 * 6. **–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å**:
 *    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Tailwind CSS.
 *    - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫ –∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã.
 *
 * –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–≥—Ä—ã –≤ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ",
 * —Å–æ—á–µ—Ç–∞—è –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ª–æ–≥–∏–∫–æ–π –∏–≥—Ä—ã –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
 */

import { JSX, useCallback, useRef, useState } from 'react';
import { HELPERS } from '@/shared';
import { toast } from 'sonner';

/**
 * –¢–∏–ø –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è.
 */
type Guess = {
  number: number;
  message: string;
  isGuessed: boolean;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ".
 * @returns {JSX.Element} –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–≥—Ä—ã.
 */
const GuessTheNumberCLIPage = (): JSX.Element => {
  const [userGuess, setUserGuess] = useState<string | null>(null);
  const [guesses, setGuesses] = useState<Guess[]>([]);
  const [secretNumber] = useState<number>(() => HELPERS.getRandomNumber(1, 100));
  const [isFinished, setIsFinished] = useState<boolean>(false);
  const inputRef = useRef<HTMLInputElement>(null);
  
  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.
   * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞.
   * @param {React.FormEvent<HTMLFormElement>} e - –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.
   */
  const handleFormSubmit = useCallback((e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const inputType = inputRef.current?.type;
    const inputValue = inputRef.current?.value.trim() ?? '';

    if (inputValue.length === 0 && inputType === 'text' && !userGuess) {
      toast('Please enter a valid input', { richColors: true });
      return;
    }

    if (inputType === 'text' && userGuess === null) {
      setUserGuess(inputValue);
      if (inputRef.current) {
        inputRef.current.value = '';
        inputRef.current.focus();
      }
      return;
    }

    const value = Number(inputValue);

    if (userGuess && (!Number.isFinite(value) || value < 0 || value > 100)) {
      toast('Please enter a valid number between 0 and 100', { richColors: true });
      if (inputRef.current) {
        inputRef.current.value = '';
      }
      return;
    }

    if (inputType === 'number' && userGuess) {
      setGuesses(prevState => {
        const message = value > secretNumber
          ? 'Too high. Try again üò∏'
          : value < secretNumber
            ? 'Too low. Try again üò∏'
            : `üéä Right. The number you've guessed: ${value}`;
        const isGuessed = value === secretNumber;
        if (isGuessed) {
          setIsFinished(true);
          HELPERS.showConfetti();
        }
        return [...prevState, { number: value, message, isGuessed }];
      });
    }

    if (inputRef.current) {
      inputRef.current.value = '';
      inputRef.current.focus();
    }
  }, [secretNumber, userGuess]);
  
  return (
    <div className="grid gap-3 p-4 text-yellow-400 xl:text-2xl bg-neutral-700 rounded-md dark:bg-black">
      <h1 className="text-2xl font-bold md:text-3xl">üé≤ Guess number</h1>
      {userGuess !== null && (
        <p>üòÑ <span className="font-bold uppercase">{userGuess}</span>, there is a number between <span
          className="font-bold">0</span> and <span className="font-bold">100</span>. Try to
          guess it in the
          fewest number of tries. After each attempt, there will be a message with the text - <span
            className="font-bold uppercase">low</span> or <span className="font-bold uppercase">high</span>
        </p>
      )}

      {guesses.length !== 0 && (
        <ul className="grid gap-3">
          {guesses.map(({ number, message, isGuessed }, idx) => (
            <li className="grid gap-2" key={idx}>
              <p className="text-2xl font-medium">‚û°Ô∏è {number}</p>
              <p>{message}</p>
              {isGuessed && <p>üéâ Number of attempts: <span className="font-bold">{guesses.length}</span></p>}
            </li>
          ))}
        </ul>
      )}
      {!isFinished && (
        <form onSubmit={handleFormSubmit}>
          <label>
            <input
              className="border-b-2 border-yellow-400 bg-transparent px-3 py-2.5 outline-none"
              type={!userGuess ? 'text' : 'number'}
              name={!userGuess ? 'name' : 'guess'}
              placeholder={!userGuess ? 'üëã Enter your name' : 'Enter number'}
              ref={inputRef}
              autoFocus
            />
          </label>
        </form>
      )}
    </div>
  );
};

export default GuessTheNumberCLIPage;