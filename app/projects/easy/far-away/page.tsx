'use client';

/**
 * # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "Far Away" - –°–ø–∏—Å–æ–∫ –≤–µ—â–µ–π –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
 *
 * ## –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
 *
 * 1. **–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
 *    - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç React —Å —Ö—É–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (useState, useCallback, useMemo).
 *    - –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (items) –∏ —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (sortBy).
 *    - –§–æ—Ä–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é react-hook-form —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π Zod.
 *
 * 2. **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:**
 *    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —É–∫–∞–∑–∞–≤ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ.
 *    - –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫, —Ñ–æ—Ä–º–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è.
 *
 * 3. **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º:**
 *    - –ö–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç –º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.
 *    - –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.
 *
 * 4. **–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:**
 *    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ –ø–æ—Ä—è–¥–∫—É –≤–≤–æ–¥–∞, –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Å—Ç–∞—Ç—É—Å—É —É–ø–∞–∫–æ–≤–∫–∏.
 *    - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é useMemo –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
 *
 * 5. **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
 *    - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
 *    - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.
 *
 * 6. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:**
 *    - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏ (useCallback) –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞.
 *    - –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫) –∫—ç—à–∏—Ä—É—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é useMemo.
 *
 * 7. **UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
 *    - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (Card, Button, Checkbox, Select) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
 *    - –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Tailwind CSS.
 *
 * –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –≤–µ—â–µ–π –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è,
 * –ø–æ–∑–≤–æ–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å–≤–æ–π –±–∞–≥–∞–∂.
 */

import { JSX, useCallback, useMemo, useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Trash2 } from 'lucide-react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Form } from '@/components/ui/form';
import { FormInput, FormSelect } from '@/components/layout';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui';

/**
 * –¢–∏–ø, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.
 */
type Item = {
  description: string;
  quantity: number;
  packed: boolean;
  id: number;
};

/**
 * –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Zod.
 */
const formSchema = z.object({
  description: z.string().min(1, 'Item description is required'),
  quantity: z.string().min(1, 'Quantity must be at least 1'),
});

/**
 * –¢–∏–ø –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–æ—Ä–º—ã, –≤—ã–≤–µ–¥–µ–Ω–Ω—ã–π –∏–∑ —Å—Ö–µ–º—ã Zod.
 */
type FormValues = z.infer<typeof formSchema>;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã Far Away.
 * @returns {JSX.Element} –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
 */
const FarAwayPage = (): JSX.Element => {
  const [items, setItems] = useState<Item[]>([]);
  const [sortBy, setSortBy] = useState<string>('input');

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      description: '',
      quantity: '1',
    },
    mode: 'onChange',
  });

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫.
   * @param {FormValues} values - –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã.
   */
  const handleAddItems = useCallback((values: FormValues): void => {
    setItems(prevItems => [
      ...prevItems,
      {
        description: values.description,
        quantity: Number(values.quantity),
        packed: false,
        id: Date.now(),
      },
    ]);

    form.reset();
  }, [form]);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.
   * @param {number} id - ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
   */
  const handleDeleteItem = useCallback((id: number): void => {
    setItems(prevItems => prevItems.filter(item => item.id !== id));
  }, []);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞.
   * @param {number} id - ID –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.
   */
  const handleToggleItem = useCallback((id: number): void => {
    setItems(prevItems =>
      prevItems.map(item =>
        item.id === id ? { ...item, packed: !item.packed } : item,
      ),
    );
  }, []);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
   */
  const handleClearList = useCallback((): void => {
    if (items.length > 0 && window.confirm('Are you sure you want to delete all items?')) {
      setItems([]);
    }
  }, [items.length]);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
   * @param {string} value - –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
   */
  const handleSortChange = useCallback((value: string): void => {
    setSortBy(value);
  }, []);

  /**
   * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
   */
  const sortedItems = useMemo(() => {
    if (items.length === 0) return [];

    const itemsCopy = [...items];

    if (sortBy === 'description') {
      return [...itemsCopy].sort((a, b) =>
        a.description.toLowerCase().localeCompare(b.description.toLowerCase()),
      );
    }

    if (sortBy === 'packed') {
      return [...itemsCopy].sort((a, b) => {
        return Number(a.packed) - Number(b.packed);
      });
    }

    return itemsCopy;
  }, [items, sortBy]);

  const numItems = items.length;
  const numPacked = items.filter(item => item.packed).length;
  const percentage = numItems > 0 ? Math.round((numPacked / numItems) * 100) : 0;

  /**
   * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
   */
  const statsMessage = useMemo(() => {
    if (!numItems) return 'Start adding some items to your packing list üöÄ';
    if (percentage === 100) return 'You got everything! Ready to go ‚úàÔ∏è';
    return `üíº You have ${numItems} items on your list, and you already packed ${numPacked} (${percentage}%)`;
  }, [numItems, numPacked, percentage]);

  /**
   * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
   */
  const quantityOptions = useMemo(() =>
      Array.from({ length: 20 }, (_, i) => ({
        value: String(i + 1),
        label: String(i + 1),
      })),
    []);

  /**
   * –û–ø—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
   */
  const sortOptions = [
    { value: 'input', label: 'Sort by input order' },
    { value: 'description', label: 'Sort by description' },
    { value: 'packed', label: 'Sort by packed status' },
  ];

  return (
    <Card className="max-w-xl w-full grid gap-3 mx-auto p-4 rounded">
      <Form {...form}>
        <form onSubmit={form.handleSubmit(handleAddItems)} className="grid gap-3">
          <h3 className="text-center">What do you need for your üòç trip?</h3>
          <FormSelect
            form={form}
            name="quantity"
            options={quantityOptions}
            label="Quantity"
            placeholder="Select quantity"
            selectProps={{
              className: 'w-full',
              value: form.watch('quantity')?.toString(),
            }}
          />
          <FormInput form={form} name="description" label="Item Description" placeholder="Description" />
          <Button type="submit">Add</Button>
        </form>
      </Form>

      <div className="grid gap-3">
        <ul className="grid gap-3">
          {sortedItems.map((item) => (
            <li className="flex items-center space-x-2" key={item.id}>
              <Checkbox
                id={`item-${item.id}`}
                checked={item.packed}
                onCheckedChange={() => handleToggleItem(item.id)}
              />
              <label
                htmlFor={`item-${item.id}`}
                className={`flex-grow ${item.packed ? 'line-through text-gray-500' : ''}`}
              >
                {item.quantity} {item.description}
              </label>
              <button onClick={() => handleDeleteItem(item.id)} className="text-red-500">
                <Trash2 />
              </button>
            </li>
          ))}
        </ul>

        <div className="grid gap-3">
          <Select
            value={sortBy}
            onValueChange={handleSortChange}
          >
            <SelectTrigger className="w-full">
              <SelectValue placeholder="Sort items" />
            </SelectTrigger>
            <SelectContent>
              {sortOptions.map((option) => (
                <SelectItem key={option.value} value={option.value}>
                  {option.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          <Button
            variant="destructive"
            onClick={handleClearList}
            disabled={items.length === 0}
          >
            Clear list
          </Button>
        </div>
      </div>

      <p className="text-center">{statsMessage}</p>
    </Card>
  );
};

export default FarAwayPage;