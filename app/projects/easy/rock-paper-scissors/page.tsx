'use client';

/**
 * # –ò–≥—Ä–∞ "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
 *
 * ## –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
 *
 * 1. **–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã**:
 *    - –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: —Å—á–µ—Ç 0:0, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
 *    - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 3 (–ø–µ—Ä–≤—ã–π, –∫—Ç–æ –Ω–∞–±–µ—Ä–µ—Ç 3 –æ—á–∫–∞, –ø–æ–±–µ–∂–¥–∞–µ—Ç)
 *    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –º–µ–∂–¥—É –∫–∞–º–Ω–µ–º, –Ω–æ–∂–Ω–∏—Ü–∞–º–∏ –∏ –±—É–º–∞–≥–æ–π
 *
 * 2. **–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å**:
 *    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞)
 *    - –ö–æ–º–ø—å—é—Ç–µ—Ä —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
 *    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞ –ø–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:
 *      - –ö–∞–º–µ–Ω—å –ø–æ–±–µ–∂–¥–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã
 *      - –ù–æ–∂–Ω–∏—Ü—ã –ø–æ–±–µ–∂–¥–∞—é—Ç –±—É–º–∞–≥—É
 *      - –ë—É–º–∞–≥–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∫–∞–º–µ–Ω—å
 *      - –ü—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –≤—ã–±–æ—Ä–µ - –Ω–∏—á—å—è (–æ–±–∞ –ø–æ–ª—É—á–∞—é—Ç –ø–æ –æ—á–∫—É)
 *    - –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—á–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞—É–Ω–¥–∞
 *
 * 3. **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã**:
 *    - –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ (–∏–ª–∏ –æ–±–∞ –ø—Ä–∏ –Ω–∏—á—å–µ–π) –Ω–∞–±–∏—Ä–∞–µ—Ç 3 –æ—á–∫–∞
 *    - –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
 *      - –ü–æ–±–µ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "You won the game! üèÜ" (—Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏)
 *      - –ü–æ–±–µ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: "You lost the game! ü§°"
 *      - –ù–∏—á—å—è: "It's a draw! ü§ù"
 *    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–≥—Ä—ã
 *
 * 4. **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º**:
 *    - –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –µ–¥–∏–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ state
 *    - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
 *    - –≠—Ñ—Ñ–µ–∫—Ç useEffect –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
 *
 * 5. **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ UX**:
 *    - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
 *    - –î–æ–±–∞–≤–ª–µ–Ω—ã ARIA-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
 *    - –ê–Ω–∏–º–∞—Ü–∏–∏ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —É–ª—É—á—à–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç
 */

import { useCallback, useEffect, useState } from 'react';
import { Button, Card } from '@/components/ui';
import { LiaHandPaper, LiaHandRock, LiaHandScissors } from 'react-icons/lia';
import { HELPERS } from '@/shared';

/**
 * –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –≤ –∏–≥—Ä–µ
 * @typedef {'rock' | 'paper' | 'scissors'} Choice
 */
type Choice = 'rock' | 'paper' | 'scissors';

/**
 * –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞
 * @typedef {'win' | 'lose' | 'draw'} Result
 */
type Result = 'win' | 'lose' | 'draw';

/**
 * –¢–∏–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
 * @typedef {'success' | 'loading' | 'error'} GameEndType
 * success - –ø–æ–±–µ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * loading - –Ω–∏—á—å—è
 * error - –ø–æ–±–µ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
 */
type GameEndType = 'success' | 'loading' | 'error';

/**
 * –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –≤ –∏–≥—Ä–µ
 * @constant {Choice[]}
 */
const CHOICES: Choice[] = ['rock', 'paper', 'scissors'];

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞
 * @constant {Record<Choice, string>}
 */
const CHOICES_DISPLAY: Record<Choice, string> = { rock: 'Rock', paper: 'Paper', scissors: 'Scissors' };

/**
 * –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @constant {Record<Result, string>}
 */
const RESULT_TEXT: Record<Result, string> = { win: 'beats', lose: 'loses to', draw: 'equals' };

/**
 * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã
 * @constant {number}
 */
const MAX_ATTEMPTS = 3;

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
 * @interface GameState
 * @property {string} message - –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @property {number} maxAttempts - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã
 * @property {Object} score - –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç –∏–≥—Ä—ã
 * @property {number} score.user - –û—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @property {number} score.computer - –û—á–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
 * @property {boolean} isFinished - –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
 */
type GameState = {
  message: string;
  maxAttempts: number;
  score: { user: number; computer: number };
  isFinished: boolean;
}

/**
 * –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 * @constant {GameState}
 */
const DEFAULT_GAME_STATE: GameState = {
  message: 'Get Started, Let\'s Rock!',
  maxAttempts: MAX_ATTEMPTS,
  score: { user: 0, computer: 0 },
  isFinished: false,
};

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä—ã "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –ø—Ä–∞–≤–∏–ª–∞–º
 *
 * @returns {JSX.Element} –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä—ã
 */
const RockPaperScissorsPage = () => {
  /**
   * –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   * @type {[GameState, React.Dispatch<React.SetStateAction<GameState>>]}
   */
  const [game, setGame] = useState<GameState>(DEFAULT_GAME_STATE);

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–æ–≤ –∏–≥—Ä–æ–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
   *
   * @param {Choice} user - –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Choice} computer - –í—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
   * @returns {Result} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞ (win, lose –∏–ª–∏ draw)
   */
  const getResult = useCallback((user: Choice, computer: Choice): Result => {
    // –ï—Å–ª–∏ –≤—ã–±–æ—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –Ω–∏—á—å—è
    if (user === computer) return 'draw';

    // –¢–∞–±–ª–∏—Ü–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: –∫–ª—é—á –ø–æ–±–µ–∂–¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
    const winConditions: Record<Choice, Choice> = {
      rock: 'scissors',
      paper: 'rock',
      scissors: 'paper',
    };

    // –ï—Å–ª–∏ –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–±–µ–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ - –ø–æ–±–µ–¥–∞, –∏–Ω–∞—á–µ - –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
    return winConditions[user] === computer ? 'win' : 'lose';
  }, []);

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞—É–Ω–¥–∞
   *
   * @param {Choice} userChoice - –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Choice} computerChoice - –í—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
   * @param {Result} result - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞
   */
  const showMessage = useCallback((userChoice: Choice, computerChoice: Choice, result: Result): void => {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞—É–Ω–¥–∞
    const message = `
      ${CHOICES_DISPLAY[userChoice]} <span class="text-sm">(user)</span> 
      ${RESULT_TEXT[result].toUpperCase()} 
      ${CHOICES_DISPLAY[computerChoice]} <span class="text-sm">(comp)</span>.
    `;
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    setGame(prevGame => ({ ...prevGame, message: message.trim() }));
  }, []);

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç
   *
   * @param {Choice} userChoice - –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Choice} computerChoice - –í—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
   * @param {Result} result - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞
   */
  const showResult = useCallback((userChoice: Choice, computerChoice: Choice, result: Result): void => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    setGame(prevState => {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç score –¥–ª—è –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const newScore = {
        user: prevState.score.user,
        computer: prevState.score.computer,
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      if (result === 'draw') {
        // –ü—Ä–∏ –Ω–∏—á—å–µ–π –æ–±–∞ –ø–æ–ª—É—á–∞—é—Ç –ø–æ –æ—á–∫—É
        newScore.user += 1;
        newScore.computer += 1;
      } else if (result === 'win') {
        // –ü—Ä–∏ –ø–æ–±–µ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ —Å—á–µ—Ç
        newScore.user += 1;
      } else {
        // –ü—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        newScore.computer += 1;
      }

      return {
        ...prevState,
        score: newScore,
      };
    });

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    showMessage(userChoice, computerChoice, result);
  }, [showMessage]);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ–ø—Ü–∏–∏ (–∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞)
   *
   * @param {Choice} choice - –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const handleOptionClick = useCallback((choice: Choice) => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    const computerChoice = CHOICES[HELPERS.getRandomNumber(0, CHOICES.length - 1)];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    showResult(choice, computerChoice, getResult(choice, computerChoice));
  }, [getResult, showResult]);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä—É –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
   */
  const handleResetGameClick = useCallback(() => {
    setGame(DEFAULT_GAME_STATE);
  }, []);

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
   *
   * @param {GameEndType} typeEnd - –¢–∏–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
   */
  const finishGame = useCallback((typeEnd: GameEndType): void => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ setGame –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö
    setGame(prevGame => {
      const messages: Record<GameEndType, string> = {
        success: 'You won the game! üèÜ',
        loading: 'It\'s a draw! ü§ù',
        error: 'You lost the game! ü§°',
      };

      // –ï—Å–ª–∏ –ø–æ–±–µ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
      if (typeEnd === 'success') {
        HELPERS.showConfetti();
      }

      return {
        ...prevGame,
        isFinished: true,
        message: messages[typeEnd] || 'Game over!',
      };
    });
  }, []);

  /**
   * –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
   */
  useEffect(() => {
    const { user, computer } = game.score;
    const { maxAttempts } = game;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if (!game.isFinished) {
      if (user === maxAttempts && computer < maxAttempts) {
        finishGame('success');
      } else if (computer === maxAttempts && user < maxAttempts) {
        finishGame('error');
      } else if (user === maxAttempts && computer === maxAttempts) {
        finishGame('loading');
      }
    }
  }, [game.score, game.maxAttempts, game.isFinished, finishGame]);

  // –ò–∫–æ–Ω–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
  const choiceIcons = {
    rock: <LiaHandRock size={50} aria-hidden="true" />,
    paper: <LiaHandPaper size={50} aria-hidden="true" />,
    scissors: <LiaHandScissors size={50} aria-hidden="true" />,
  };

  return (
    <Card className="max-w-2xl w-full mx-auto p-4 rounded gap-3">
      <div
        className="border-4 border-black dark:border-white relative font-bold text-6xl md:text-8xl flex justify-center items-center p-10 bg-white dark:bg-gray-800 text-black dark:text-white"
        role="region"
        aria-label="Game score"
      >
        <span className="absolute top-1/2 -translate-y-1/2 text-sm left-0 p-2 bg-red-400 text-white">user</span>
        <span className="absolute top-1/2 -translate-y-1/2 text-sm right-0 p-2 bg-red-400 text-white">computer</span>
        <span>{game.score.user}</span>:
        <span>{game.score.computer}</span>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ */}
      <div
        className="text-center font-medium text-xl"
        dangerouslySetInnerHTML={{ __html: game.message }}
        aria-live="polite"
      />

      {/* –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ */}
      {!game.isFinished && (
        <ul
          className="options grid gap-4 grid-cols-3 justify-items-center max-w-md mx-auto"
          role="group"
          aria-label="Game options"
        >
          {CHOICES.map((choice) => (
            <li key={choice}>
              <button
                className="border-4 border-black w-[80px] sm:w-[100px] h-[80px] sm:h-[100px] p-2 rounded-full active:scale-95 transition active:border-red-400 dark:border-gray-500"
                onClick={() => handleOptionClick(choice)}
                aria-label={CHOICES_DISPLAY[choice]}
              >
                <div className="pointer-events-none flex justify-center">
                  {choiceIcons[choice]}
                </div>
              </button>
            </li>
          ))}
        </ul>
      )}

      {!game.isFinished && <p className="text-center font-medium">Make your move.</p>}

      {game.isFinished && (
        <Button variant="destructive" onClick={handleResetGameClick} aria-label="Start a new game">
          Repeat Game
        </Button>
      )}
    </Card>
  );
};

export default RockPaperScissorsPage;